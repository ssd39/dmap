/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.4-338
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';


// Services

export interface StringOpDef {
    array: (s: string, callParams: CallParams<'s'>) => string[] | Promise<string[]>;
}
export function registerStringOp(service: StringOpDef): void;
export function registerStringOp(serviceId: string, service: StringOpDef): void;
export function registerStringOp(peer: FluencePeer, service: StringOpDef): void;
export function registerStringOp(peer: FluencePeer, serviceId: string, service: StringOpDef): void;
       

export function registerStringOp(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "array" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "s" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function add_blueprint(
    module_hash: string,
    config?: {ttl?: number}
): Promise<string>;

export function add_blueprint(
    peer: FluencePeer,
    module_hash: string,
    config?: {ttl?: number}
): Promise<string>;

export function add_blueprint(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "module_hash") [] module_hash)
                          )
                          (call %init_peer_id% ("op" "concat_strings") ["hash:" module_hash] prefixed_hash)
                         )
                         (call %init_peer_id% ("op" "array") [prefixed_hash] dependencies)
                        )
                        (call %init_peer_id% ("dist" "make_blueprint") ["process_files" dependencies] blueprint)
                       )
                       (call %init_peer_id% ("dist" "add_blueprint") [blueprint] blueprint_id)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [blueprint_id])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "add_blueprint",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "module_hash" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function remove_service(
    relay: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function remove_service(
    peer: FluencePeer,
    relay: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function remove_service(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                         )
                         (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call relay ("srv" "remove") [service_id])
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [true])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "remove_service",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function add_module(
    name: string,
    path: string,
    config?: {ttl?: number}
): Promise<string>;

export function add_module(
    peer: FluencePeer,
    name: string,
    path: string,
    config?: {ttl?: number}
): Promise<string>;

export function add_module(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "name") [] name)
                         )
                         (call %init_peer_id% ("getDataSrv" "path") [] path)
                        )
                        (call %init_peer_id% ("dist" "default_module_config") [name] config)
                       )
                       (call %init_peer_id% ("dist" "add_module_from_vault") [path config] module_hash)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [module_hash])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "add_module",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "name" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "path" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function image_resize(
    cid: string,
    height: number,
    width: number,
    ipfs: string,
    node: string,
    service_id: string,
    error: (arg0: string, arg1: string, callParams: CallParams<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<number[]>;

export function image_resize(
    peer: FluencePeer,
    cid: string,
    height: number,
    width: number,
    ipfs: string,
    node: string,
    service_id: string,
    error: (arg0: string, arg1: string, callParams: CallParams<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<number[]>;

export function image_resize(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                               (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                              )
                              (call %init_peer_id% ("getDataSrv" "height") [] height)
                             )
                             (call %init_peer_id% ("getDataSrv" "width") [] width)
                            )
                            (call %init_peer_id% ("getDataSrv" "ipfs") [] ipfs)
                           )
                           (call %init_peer_id% ("getDataSrv" "node") [] node)
                          )
                          (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call node ("aqua-ipfs" "get_from") [cid ipfs] get)
                          (xor
                           (seq
                            (match get.$.success! true
                             (null)
                            )
                            (call -relay- ("op" "noop") [])
                           )
                           (seq
                            (par
                             (seq
                              (call -relay- ("op" "noop") [])
                              (xor
                               (call %init_peer_id% ("callbackSrv" "error") ["Ipfs.get_from failed" get.$.error!])
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              )
                             )
                             (null)
                            )
                            (call -relay- ("op" "noop") [])
                           )
                          )
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                        )
                       )
                       (call %init_peer_id% (service_id "imageresize") [get.$.path! height width] imageresize)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [imageresize])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "image_resize",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "cid" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "height" : {
                    "tag" : "scalar",
                    "name" : "u32"
                },
                "width" : {
                    "tag" : "scalar",
                    "name" : "u32"
                },
                "ipfs" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "error" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "nil"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u8"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function deploy_service(
    relay: string,
    cid: string,
    ipfs: string,
    error: (arg0: string, arg1: string, callParams: CallParams<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<string | null>;

export function deploy_service(
    peer: FluencePeer,
    relay: string,
    cid: string,
    ipfs: string,
    error: (arg0: string, arg1: string, callParams: CallParams<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<string | null>;

export function deploy_service(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                         )
                         (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                        )
                        (call %init_peer_id% ("getDataSrv" "ipfs") [] ipfs)
                       )
                       (new $service_id
                        (seq
                         (seq
                          (call -relay- ("op" "noop") [])
                          (xor
                           (seq
                            (call relay ("aqua-ipfs" "get_from") [cid ipfs] get_result)
                            (xor
                             (match get_result.$.success! true
                              (xor
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (call relay ("dist" "default_module_config") ["process_files"] config)
                                      (call relay ("dist" "add_module_from_vault") [get_result.$.path! config] module_hash)
                                     )
                                     (call relay ("op" "concat_strings") ["hash:" module_hash] prefixed_hash)
                                    )
                                    (call relay ("op" "array") [prefixed_hash] dependencies)
                                   )
                                   (call relay ("dist" "make_blueprint") ["process_files" dependencies] blueprint)
                                  )
                                  (call relay ("dist" "add_blueprint") [blueprint] blueprint_id)
                                 )
                                 (call relay ("srv" "create") [blueprint_id] $service_id)
                                )
                                (call -relay- ("op" "noop") [])
                               )
                               (seq
                                (call -relay- ("op" "noop") [])
                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                               )
                              )
                             )
                             (seq
                              (seq
                               (call -relay- ("op" "noop") [])
                               (par
                                (seq
                                 (call -relay- ("op" "noop") [])
                                 (xor
                                  (call %init_peer_id% ("callbackSrv" "error") ["Ipfs.get_from failed" get_result.$.error!])
                                  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                 )
                                )
                                (null)
                               )
                              )
                              (call -relay- ("op" "noop") [])
                             )
                            )
                           )
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                          )
                         )
                         (call %init_peer_id% ("op" "identity") [$service_id] service_id-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [service_id-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "deploy_service",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "cid" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ipfs" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "error" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "nil"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
